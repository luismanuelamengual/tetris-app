$backgroundColor: black;
$blockGradientAngle: 135deg;
$blockGradientLightningPercentage: 15%;
$blockBorderLightningPercentage: 0%;
$blockIColor: rgb(255, 40, 40);
$blockJColor: rgb(80, 80, 255);
$blockLColor: rgb(209, 150, 0);
$blockOColor: rgb(207, 207, 6);
$blockSColor: rgb(162, 29, 207);
$blockZColor: rgb(35, 184, 22);
$blockTColor: rgb(21, 168, 173);
$blockInactiveColor: rgb(128, 128, 128);

@keyframes shine { 
  0% {transform:translateX(-100%) translateY(-100%) rotate(30deg);}
	100% {transform:translateX(100%) translateY(100%) rotate(30deg);}
}

.tetris-board {
  position: relative;
  border: 2px solid red;
  box-sizing: border-box;
  background-color: $backgroundColor;
  overflow: hidden;
  width: 300px;
  aspect-ratio: 0.5;
  
  * {
    box-sizing: border-box;
  }

  .block {
    position: absolute;
    border-style: outset;
    border-width: 3px;
   
    &.block-flashing {
      overflow: hidden;
      
      &:after {
        content: '';
        top: 0;
        transform: translateX(100%) rotate(30deg);
        width: 300%;
        height: 300%;
        position: absolute;
        z-index: 1;
        animation: shine 0.5s ease-in forwards;
        animation-play-state: running;
        background:
          linear-gradient( to right, 
            rgba(255,255,255,0) 0%,
            rgba(255,255,255,0.8) 50%,
            rgba(128,186,232,0) 99%,
            rgba(128,186,232,0) 100%);
      }
    }
    
    &.block-i {
      background: $blockIColor;
      background: linear-gradient($blockGradientAngle, $blockIColor, lighten($blockIColor, $blockGradientLightningPercentage), $blockIColor);
      border-color: lighten($blockIColor, $blockBorderLightningPercentage);
    }

    &.block-j {
      background: $blockJColor;
      background: linear-gradient($blockGradientAngle, $blockJColor, lighten($blockJColor, $blockGradientLightningPercentage), $blockJColor);
      border-color: lighten($blockJColor, $blockBorderLightningPercentage);
    }

    &.block-l {
      background: $blockLColor;
      background: linear-gradient($blockGradientAngle, $blockLColor, lighten($blockLColor, $blockGradientLightningPercentage), $blockLColor);
      border-color: lighten($blockLColor, $blockBorderLightningPercentage);
    }

    &.block-o {
      background: $blockOColor;
      background: linear-gradient($blockGradientAngle, $blockOColor, lighten($blockOColor, $blockGradientLightningPercentage), $blockOColor);
      border-color: lighten($blockOColor, $blockBorderLightningPercentage);
    }

    &.block-s {
      background: $blockSColor;
      background: linear-gradient($blockGradientAngle, $blockSColor, lighten($blockSColor, $blockGradientLightningPercentage), $blockSColor);
      border-color: lighten($blockSColor, $blockBorderLightningPercentage);
    }

    &.block-z {
      background: $blockZColor;
      background: linear-gradient($blockGradientAngle, $blockZColor, lighten($blockZColor, $blockGradientLightningPercentage), $blockZColor);
      border-color: lighten($blockZColor, $blockBorderLightningPercentage);
    }

    &.block-t {
      background: $blockTColor;
      background: linear-gradient($blockGradientAngle, $blockTColor, lighten($blockTColor, $blockGradientLightningPercentage), $blockTColor);
      border-color: lighten($blockTColor, $blockBorderLightningPercentage);
    }

    @for $x from 1 through 10 {
      &.x#{$x} {
        left: percentage(($x - 1) / 10);
        right: percentage((10 - $x) / 10);
      }
    }
  
    @for $y from 1 through 20 {
      &.y#{$y} {
        top: percentage((($y - 1)) / 20);
        bottom: percentage((20 - $y) / 20);
      }
    }
  }
  
  &.tetris-board-finished {
    .block {
      background: $blockInactiveColor;
      background: linear-gradient($blockGradientAngle, $blockInactiveColor, lighten($blockInactiveColor, $blockGradientLightningPercentage), $blockInactiveColor);
      border-color: lighten($blockInactiveColor, $blockBorderLightningPercentage);;
    }
  }
}